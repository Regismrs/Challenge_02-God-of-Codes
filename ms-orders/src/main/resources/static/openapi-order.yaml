openapi: 3.0.3
info:
  title: Swagger E-Commerce GOC - OpenAPI 3.0
  description: |-
    This is a e-commerce Server based on the OpenAPI 3.0 specification.

    Some useful links:
    - [The Challenge_02-God-of-Codes e-commerce repository](https://github.com/Regismrs/Challenge_02-God-of-Codes)
    - [The base source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8082
tags:
  - name: order
    description: Everything about your Orders
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /orders:
    get:
      tags:
        - order
      summary: Finds All Orders
      description: Return a list of order
      operationId: getAll
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus500' 
    post:
      tags:
        - order
      summary: Add a new order to the store
      description: Add a new order to the store
      operationId: createProduct
      requestBody:
        description: Create a new order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus400' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus500' 
  /order/{id}:
    get:
      tags:
        - order
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrder
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus400'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus500'
    put:
      tags:
        - order
      summary: Update an existing product
      description: Update an existing order by Id
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus400'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus500'
    post:
      tags:
        - order
      summary: Cancel a order
      description: Cancel a order, return status No content code 204 is success case.
      operationId: CancelOrder
      parameters:
        - name: id
          in: path
          description: Order id to cancel
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus404'
  
components:
  schemas:
    OrderRequest:
      required:
        - product
        - address
        - paymentMethod
      type: object
      properties:
        product:
          $ref: '#/components/schemas/productRequest'
        address:
          $ref: '#/components/schemas/addressRequest'
        paymentMethod:
          $ref: '#/components/schemas/paymentEnum'
    productRequest:
      required:
      - productId
      - quantity
      type: object
      properties:
        productId:
          type: integer
          format: int64
          example: 10
        quantity:
          type: integer
          format: int64
          example: 1
    addressRequest:
      required:
      - street
      - number
      - postalCode
      type: object
      properties:
        street:
          type: string
          example: "rua exemplo"
        number:
          type: string
          example: "330"
        postalCode:
          type: string
          example: "12345678"
    paymentEnum:
      type: string
      enum:
        - CREDIT_CARD
        - BANK_TRANSFER
        - CRYPTOCURRENCY
        - GIFT_CARD
        - PIX
        - OTHER
    OrderResponse:
      required:
        - id
        - products
        - discount
        - status
        - createdDate
        - address
        - paymentMethod
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        products:
          $ref: '#/components/schemas/productResponse'
        discount:
          type: integer
          format: int64
          example: 0
        status:
          type: string
          enum:
            - CONFIRMED
            - SENT
            - CANCELED
        createdDate:
          type: string
          example: "2023-10-23T12:18:25.007341"
        address:
          $ref: '#/components/schemas/addressResponse'
        paymentMethod:
          $ref: '#/components/schemas/paymentEnumResponse'
    paymentEnumResponse:
      required:
      - paymentMethod
      - subtotalValue
      - totalValue
      type: object
      properties:
        paymentMethod:
          type: string
          enum:
            - CREDIT_CARD
            - BANK_TRANSFER
            - CRYPTOCURRENCY
            - GIFT_CARD
            - PIX
            - OTHER
        subtotalValue:
          type: number
          example: 340.00
        totalValue:
          type: number
          example: 340.00
    addressResponse:
      required:
      - street
      - number
      - complement
      - city
      - state
      - postalCode
      type: object
      properties:
        street:
          type: string
          example: "rua exemplo"
        number:
          type: string
          example: "330"
        complement:
          type: string
          example: "casa"
        city:
          type: string
          example: "Cidade exemplo"
        state:
          type: string
          example: "State exemple"
        postalCode:
          type: string
          example: "12345678"
    productResponse:
      required:
      - productId
      - quantity
      type: object
      properties:
        productId:
          type: integer
          format: int64
          example: 10
        quantity:
          type: integer
          format: int64
          example: 1
    ResponseStatus400:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 400
        status:
          type: string
          example: Bad request
        message:
          type: string
          example: ...
        details:
          type: array
          items:
            $ref: '#/components/schemas/ResponseDetailsItem'
    ResponseStatus404:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 404
        status:
          type: string
          example: Not Found
        message:
          type: string
          example: ...
        details:
          type: array
          items:
            $ref: '#/components/schemas/ResponseDetailsItem'
          example: []
    ResponseStatus500:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 500
        status:
          type: string
          example: Internal server error
        message:
          type: string
          example: ...
        details:
          type: array
          items:
            $ref: '#/components/schemas/ResponseDetailsItem'
          example: []
    ResponseDetailsItem:
      type: object
      properties:
        field:
          type: string
          example: "fieldName"
        message:
          type: string
          example: "fieldName can't ..."
              
