openapi: 3.0.3
info:
  title: Swagger E-Commerce GOC - OpenAPI 3.0
  description: |-
    This is a e-commerce Server based on the OpenAPI 3.0 specification.

    Some useful links:
    - [The Challenge_02-God-of-Codes e-commerce repository](https://github.com/Regismrs/Challenge_02-God-of-Codes)
    - [The base source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8081
tags:
  - name: product
    description: Everything about your Products
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /products:
    get:
      tags:
        - product
      summary: Finds All Products
      description: Return a list of products
      operationId: getAll
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus500' 
    post:
      tags:
        - product
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: createProduct
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus400' 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus500' 
  /product/{id}:
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus400'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus500'
    put:
      tags:
        - product
      summary: Update an existing product
      description: Update an existing product by Id
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus400'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus500'
    delete:
      tags:
        - product
      summary: Deletes a product
      description: delete a product, return status No content code 204 is success case.
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus404'
  
components:
  schemas:
    
    ProductRequest:
      required:
        - name
        - description
        - value
      type: object
      properties:
        name:
          type: string
          example: Product 1
        description:
          type: string
          example: Description for product 1
        value:
          type: number
          example: 1.11
    ProductResponse:
      required:
        - name
        - description
        - value
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Product 1
        description:
          type: string
          example: Description for product 1
        value:
          type: number
          example: 1.11
    ResponseStatus400:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 400
        status:
          type: string
          example: Bad request
        message:
          type: string
          example: ...
        details:
          type: array
          items:
            $ref: '#/components/schemas/ResponseDetailsItem'
    ResponseStatus404:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 404
        status:
          type: string
          example: Not Found
        message:
          type: string
          example: ...
        details:
          type: array
          items:
            $ref: '#/components/schemas/ResponseDetailsItem'
          example: []
    ResponseStatus500:
      type: object
      properties:
        code:
          type: integer
          format: int64
          example: 500
        status:
          type: string
          example: Internal server error
        message:
          type: string
          example: ...
        details:
          type: array
          items:
            $ref: '#/components/schemas/ResponseDetailsItem'
          example: []
    ResponseDetailsItem:
      type: object
      properties:
        field:
          type: string
          example: "fieldName"
        message:
          type: string
          example: "fieldName can't ..."
              